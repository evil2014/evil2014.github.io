Figure one shows step one of the conversion from the decimal number 192 dot 168 dot 10 dot 10 to its binary equivalent.  In step one the decimal number is compared to the left-most binary bit, which is 128 and the question of “do I need 128 to make 192?” is posed.  The answer is yes so the 128 bit is turned on and the value of 128 is subtracted from 192.  The result is 64.  The process continues to the next octet and asks the question “do I need 64 to make 64?”.  The answer is yes, so this bit is turned on and 64 is then subtracted from 64 for a result of zero.  Since we don’t need any more bits turned on, the remaining six bits in this octet are turned off.  The byte is one one zero zero zero zero zero zero zero zero. Figure two begins with the decimal number of 168.  In step one the decimal number is compared to the left-most binary bit, which is 128 and the question of “do I need 128 to make 168?” is posed.  The answer is yes so the 128 bit is turned on and the value of 128 is subtracted from 168.  The result is 40.  The next step is to move to the next bit and ask the question “do I need 64 to make 40?”.  The answer is no, so this bit is turned off with a zero.  The process moves to the next bit and asks the question “do I need 32 to make 40?”.  The answer is yes so the bit is turned on and 32 is subtracted from 40 for a result of 8.  The process moves to the next bit and asks the question “do I need 16 to make 8?”.  The answer is no, so this bit is turned off with a zero.  The process moves to the next bit and asks the question “do I need 8 to make 8?”.  The answer is yes so the bit is turned on and 8 is subtracted from 8 for a result of 0.  The last two bits are set to zero since there is no remainder to calculate bits.  The final binary equivalent of 168 is one zero one zero one zero zero zero. Figure three begins with the decimal number of 10.  In step one the decimal number is compared to the left-most binary bit, which is 128 and the question of “do I need 128 to make 168?” is posed.  The answer is no, so this bit is turned off with a zero.   The next step is to move to the next bit and ask the question “do I need 64 to make 10?”.  The answer is no, so this bit is turned off with a zero.  The process moves to the next bit and asks the question “do I need 32 to make 40?”.  The answer is no, so this bit is turned off with a zero.  The process moves to the next bit and asks the question “do I need 16 to make 10?”.  The answer is no, so this bit is turned off with a zero.  The process moves to the next bit and asks the question “do I need 8 to make 10?”.  The answer is yes so the bit is turned on and 8 is subtracted from 10 for a result of 2.  The process moves to the next bit and asks the question “do I need 4 to make 2?”.  The answer is no, so this bit is turned off with a zero.  The process moves to the next bit and asks the question “do I need 2 to make 2?”.  The answer is yes so the bit is turned on and 2 is subtracted from 2 for a result of 0.  The last bit is set to zero since there is no remainder to calculate bits.  The final binary equivalent of 10 is zero zero zero zero one zero one zero. Figure four begins with the decimal number of 10.  In step one the decimal number is compared to the left-most binary bit, which is 128 and the question of “do I need 128 to make 168?” is posed.  The answer is no, so this bit is turned off with a zero.   The next step is to move to the next bit and ask the question “do I need 64 to make 10?”.  The answer is no, so this bit is turned off with a zero.  The process moves to the next bit and asks the question “do I need 32 to make 40?”.  The answer is no, so this bit is turned off with a zero.  The process moves to the next bit and asks the question “do I need 16 to make 10?”.  The answer is no, so this bit is turned off with a zero.  The process moves to the next bit and asks the question “do I need 8 to make 10?”.  The answer is yes so the bit is turned on and 8 is subtracted from 10 for a result of 2.  The process moves to the next bit and asks the question “do I need 4 to make 2?”.  The answer is no, so this bit is turned off with a zero.  The process moves to the next bit and asks the question “do I need 2 to make 2?”.  The answer is yes so the bit is turned on and 2 is subtracted from 2 for a result of 0.  The last bit is set to zero since there is no remainder to calculate bits.  The final binary equivalent of 10 is zero zero zero zero one zero one zero. Figure five shows the I.P. address of 192 dot 168 dot 10 dot 10 converts to the binary number one one zero zero zero zero zero zero one zero one zero one zero zero zero zero zero zero zero one zero one zero zero zero zero zero one zero one zero.